[build-system]
requires = ["setuptools>=42.0.0", "wheel>=0.37.0"]
build-backend = "setuptools.build_meta"

[project]
name = "airflow-composer2-migration"
version = "1.0.0"
description = "Migration project from Apache Airflow 1.10.15 to Airflow 2.X on Cloud Composer 2"
authors = [
    {name = "DevOps Team", email = "devops@example.com"}
]
requires-python = ">=3.8,<3.9"
dependencies = [
    "apache-airflow>=2.5.0,<2.6.0",
    "apache-airflow-providers-google>=8.10.0",
    "apache-airflow-providers-http>=4.3.0",
    "apache-airflow-providers-postgres>=5.4.0",
    "apache-airflow-providers-celery>=3.1.0",
    "apache-airflow-providers-redis>=3.0.0",
    "google-cloud-storage>=2.8.0",
    "google-cloud-secret-manager>=2.15.0",
    "google-cloud-monitoring>=2.12.0",
    "psycopg2-binary>=2.9.5",
    "redis>=4.3.0",
    "celery>=5.2.7",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Framework :: Apache Airflow",
    "Framework :: Apache Airflow :: Provider",
]
readme = "README.md"

[project.urls]
Repository = "https://github.com/example/airflow-composer2-migration"
Documentation = "https://example.github.io/airflow-composer2-migration"
Issues = "https://github.com/example/airflow-composer2-migration/issues"

[project.scripts]
validate-dags = "scripts.validate_dags:main"
import-variables = "scripts.import_variables:main"
import-connections = "scripts.import_connections:main"
setup-composer = "scripts.setup_composer:main"
deploy-dags = "scripts.deploy_dags:main"

[project.optional-dependencies]
test = [
    "pytest>=7.3.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.10.0",
    "pytest-airflow>=0.3.0",
    "pytest-timeout>=2.1.0",
]
docs = [
    "sphinx>=6.2.1",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autoapi>=2.1.0",
    "myst-parser>=1.0.0",
]
security = [
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "pipenv-audit>=0.0.0",
]
dev = [
    "pytest>=7.3.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.10.0",
    "pytest-airflow>=0.3.0",
    "black>=23.3.0",
    "pylint>=2.17.4",
    "flake8>=6.0.0",
    "mypy>=1.3.0",
    "isort>=5.12.0",
    "bandit>=1.7.5",
    "pre-commit>=3.3.1",
]

[tool.black]
line-length = 88
target-version = ["py38"]
include = ["src", "tests"]
exclude = ["migrations/alembic_migrations/versions"]

[tool.pytest]
addopts = "--strict-markers -v"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pylint]
max-line-length = 88
disable = ["C0103", "C0111", "R0903"]
ignore = ["migrations"]
ignore-patterns = ["test_.*\\.py"]