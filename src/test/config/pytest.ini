# Configuration file for pytest that defines testing behavior, markers, plugins and execution settings
# for the Apache Airflow migration project from Airflow 1.10.15 to Airflow 2.X on Cloud Composer 2.
# This file ensures consistent test execution across development environments and CI/CD pipelines.

[pytest]
# Main pytest configuration section
# Defines core behavior of pytest during test execution

testpaths = src/backend
            src/test
# Specifies the directories where pytest should search for test files.
# This setting ensures that tests in both the src/backend and src/test directories are discovered and executed.

python_files = test_*.py
# Specifies the naming pattern for test files.
# Any file starting with "test_" and ending with ".py" will be treated as a test file.

python_classes = Test*
# Specifies the naming pattern for test classes.
# Any class starting with "Test" will be treated as a test class.

python_functions = test_*
# Specifies the naming pattern for test functions.
# Any function starting with "test_" will be treated as a test function.

addopts = --verbose --color=yes --doctest-modules --showlocals --tb=native --cov=src/backend --cov-config=src/test/config/.coveragerc
# Specifies command-line options for pytest.
# --verbose: Increase verbosity of test execution.
# --color=yes: Enable color output for test results.
# --doctest-modules: Run doctests in all modules.
# --showlocals: Show local variables in tracebacks.
# --tb=native: Use native traceback formatting.
# --cov=src/backend: Enable code coverage measurement for the src/backend directory.
# --cov-config=src/test/config/.coveragerc: Specify the code coverage configuration file.

norecursedirs = node_modules .git .tox .eggs dist build __pycache__ .pytest_cache
# Specifies directories to exclude from recursive test discovery.
# This setting prevents pytest from traversing into directories that are not relevant to testing.

log_cli = true
# Enables command-line logging.
# This setting ensures that log messages are displayed in the console during test execution.

log_cli_level = INFO
# Specifies the logging level for command-line logging.
# Only log messages with a level of INFO or higher will be displayed in the console.

log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
# Specifies the format for command-line log messages.
# This setting defines the structure and content of log messages displayed in the console.

log_cli_date_format = %Y-%m-%d %H:%M:%S
# Specifies the date format for command-line log messages.
# This setting defines the format of the date and time in log messages displayed in the console.

markers = airflow1: marks tests for Airflow 1.10.15 compatibility
          airflow2: marks tests for Airflow 2.X compatibility
          unit: marks unit tests
          integration: marks integration tests
          migration: marks migration-related tests
          dags: marks tests for DAG validation
          operators: marks tests for operators
          hooks: marks tests for hooks
          sensors: marks tests for sensors
          plugins: marks tests for plugins
          performance: marks performance tests
          security: marks security tests
          composer1: marks tests for Cloud Composer 1
          composer2: marks tests for Cloud Composer 2
          e2e: marks end-to-end tests
          backend: marks backend-specific tests
          fixture: marks fixture tests
# Defines custom markers for test classification and filtering.
# These markers can be used to categorize tests based on their purpose, scope, or compatibility.

xfail_strict = true
# Specifies that xfail markers should be treated as strict.
# This setting ensures that tests marked with xfail must fail, otherwise they will be reported as xpass.

junit_family = xunit2
# Specifies the JUnit XML format to use for test reporting.
# This setting ensures compatibility with CI/CD systems that consume JUnit XML reports.

filterwarnings = ignore::DeprecationWarning:pkg_resources.*:
                 ignore::DeprecationWarning:airflow.contrib.*:
                 ignore::PendingDeprecationWarning:airflow.contrib.*:
                 ignore::DeprecationWarning:apache_beam.*:
# Specifies filters for ignoring warnings during test execution.
# This setting prevents specific types of warnings from being displayed in the console or reported as test failures.

timeout = 300
# Specifies a default timeout for all tests.
# This setting prevents tests from running indefinitely and ensures that they are terminated if they exceed the specified time limit.

[tool:pytest]
# Tool-specific pytest configuration
# Configures pytest plugins and additional behaviors

# Code coverage measurement and reporting
# cov: Specifies the source directory for code coverage measurement.
# cov-config: Specifies the code coverage configuration file.
# cov-report: Specifies the code coverage report formats.
#   term: Generate a terminal report.
#   html: Generate an HTML report in the coverage_html_report directory.
#   xml: Generate an XML report in the coverage.xml file.
addopts = --cov=src/backend --cov-config=src/test/config/.coveragerc --cov-report term --cov-report html:coverage_html_report --cov-report xml:coverage.xml

# Distributed testing support for parallel test execution
# numprocesses: Specifies the number of processes to use for parallel test execution.
#   auto: Automatically determine the number of processes based on the available CPU cores.
xdist_numprocesses = auto

# Test execution timeouts to prevent hanging tests
# timeout: Specifies the timeout in seconds for each test.
timeout_timeout = 300

# Airflow-specific testing utilities
# composer: Enable Cloud Composer-specific testing features.
# migrate: Enable migration-specific testing features.
# airflow2: Enable Airflow 2.X-specific testing features.
airflow_airflow_home = /tmp/airflow
airflow_composer = True
airflow_migrate = True
airflow_airflow2 = True