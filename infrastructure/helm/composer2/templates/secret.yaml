{{- /*
This template defines the Kubernetes Secret resources needed for Cloud Composer 2
with Airflow 2.X. It handles sensitive configuration data including database
credentials, API keys, connection strings, and environment-specific secrets.
*/}}

{{- /*
Generate base64-encoded connection strings from Airflow connections
*/}}
{{- define "composer2.generateConnectionSecrets" -}}
{{- $connections := dict }}
{{- range . }}
{{- $conn_uri := "" }}
{{- /* Get potentially secret-referenced password */}}
{{- $password := default "" .password }}
{{- if and $password (hasPrefix "{SECRET:" $password) }}
{{- $password = include "composer2.lookupSecretRef" $password }}
{{- end }}
{{- if eq .type "postgres" }}
{{- $conn_uri = printf "postgresql://%s:%s@%s:%d/%s" (default "" .login) $password .host (default 5432 .port | int) (default .login .schema) }}
{{- else if eq .type "mysql" }}
{{- $conn_uri = printf "mysql://%s:%s@%s:%d/%s" (default "" .login) $password .host (default 3306 .port | int) (default .login .schema) }}
{{- else if eq .type "google_cloud_platform" }}
{{- $keyfile_json := default "" .extra.keyfile_json }}
{{- if hasPrefix "{SECRET:" $keyfile_json }}
{{- $keyfile_json = include "composer2.lookupSecretRef" $keyfile_json }}
{{- end }}
{{- $conn_uri = printf "google-cloud-platform://?extra__google_cloud_platform__project=%s&extra__google_cloud_platform__keyfile_json=%s" (default "" .extra.project) $keyfile_json }}
{{- else if eq .type "http" }}
{{- $conn_uri = printf "http://%s:%s@%s:%d" (default "" .login) $password .host (default 80 .port | int) }}
{{- else if eq .type "ssh" }}
{{- $conn_uri = printf "ssh://%s:%s@%s:%d" (default "" .login) $password .host (default 22 .port | int) }}
{{- else }}
{{- /* Default handling for other connection types */ -}}
{{- $conn_uri = printf "%s://%s:%s@%s:%d/%s" .type (default "" .login) $password .host (default 0 .port | int) (default "" .schema) }}
{{- end }}
{{- /* Add any extra json parameters */ -}}
{{- if .extra }}
{{- $extraParams := list }}
{{- range $key, $value := .extra }}
{{- if and $key $value (ne $key "project") (ne $key "keyfile_json") }}
{{- /* Check for secret references in extra parameters */}}
{{- $paramValue := $value }}
{{- if hasPrefix "{SECRET:" $paramValue }}
{{- $paramValue = include "composer2.lookupSecretRef" $paramValue }}
{{- end }}
{{- $param := printf "%s=%s" $key $paramValue }}
{{- $extraParams = append $extraParams $param }}
{{- end }}
{{- end }}
{{- if $extraParams }}
{{- $conn_uri = printf "%s?%s" $conn_uri (join "&" $extraParams) }}
{{- end }}
{{- end }}
{{- $_ := set $connections .id $conn_uri }}
{{- end }}
{{- $connections | toJson }}
{{- end }}

{{- /*
Generate base64-encoded variable values from Airflow variables
*/}}
{{- define "composer2.generateVariableSecrets" -}}
{{- $variables := dict }}
{{- range $key, $value := . }}
{{- $varValue := $value }}
{{- if hasPrefix "{SECRET:" (toString $varValue) }}
{{- $varValue = include "composer2.lookupSecretRef" (toString $varValue) }}
{{- end }}
{{- $_ := set $variables $key (toString $varValue) }}
{{- end }}
{{- $variables | toJson }}
{{- end }}

{{- /*
Resolve secret references in the format {SECRET:name:version}
*/}}
{{- define "composer2.lookupSecretRef" -}}
{{- $value := . }}
{{- if hasPrefix "{SECRET:" $value }}
{{- $secretRef := regexFind "{SECRET:[^}]+" $value }}
{{- $secretRef = trimPrefix "{SECRET:" $secretRef }}
{{- $secretParts := splitList ":" $secretRef }}
{{- $secretName := index $secretParts 0 }}
{{- $secretVersion := "latest" }}
{{- if gt (len $secretParts) 1 }}
{{- $secretVersion = index $secretParts 1 }}
{{- end }}
{{- /* This is a placeholder - in a real environment you'd integrate with GCP Secret Manager */ -}}
{{- $value = printf "$SECRET_REFERENCE[%s:%s]" $secretName $secretVersion }}
{{- end }}
{{- $value }}
{{- end }}

{{- /* Define common secret annotations */}}
{{- define "composer2.secretAnnotations" -}}
helm.sh/hook: pre-install,pre-upgrade
helm.sh/hook-weight: "-5"
{{- if .Values.secrets.encryptionKeyRef }}
# Reference to the KMS key used for encryption at rest
beta.kubernetes.io/kms-key-name: {{ .Values.secrets.encryptionKeyRef }}
{{- end }}
{{- with .Values.secrets.annotations }}
{{- toYaml . }}
{{- end }}
{{- end }}

# Main Airflow secrets containing connections, variables, and credentials
{{- if not .Values.secrets.existingSecret }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "composer2.airflowSecretName" . }}
  labels:
    {{- include "composer2.labels" . | nindent 4 }}
  annotations:
    {{- include "composer2.secretAnnotations" . | nindent 4 }}
type: Opaque
data:
  # Airflow connections
  {{- if .Values.airflow.connections }}
  connections.json: {{ include "composer2.generateConnectionSecrets" .Values.airflow.connections | b64enc | quote }}
  {{- end }}
  
  # Airflow variables
  {{- if .Values.airflow.variables }}
  variables.json: {{ include "composer2.generateVariableSecrets" .Values.airflow.variables | b64enc | quote }}
  {{- end }}
  
  # Admin credentials
  adminUser: {{ default "admin" .Values.security.adminUser | b64enc | quote }}
  adminPassword: {{ default (randAlphaNum 16) .Values.security.adminPassword | b64enc | quote }}
  
  # Database credentials
  postgresUser: {{ default "airflow" .Values.security.postgresUser | b64enc | quote }}
  postgresPassword: {{ default (randAlphaNum 16) .Values.security.postgresPassword | b64enc | quote }}
  
  # Redis password for Celery broker
  redisPassword: {{ default (randAlphaNum 16) .Values.security.redisPassword | b64enc | quote }}
{{- end }}

# Flask webserver secret key
{{- if not .Values.secrets.existingWebserverSecretKey }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "composer2.fullname" . }}-webserver-key
  labels:
    {{- include "composer2.labels" . | nindent 4 }}
  annotations:
    {{- include "composer2.secretAnnotations" . | nindent 4 }}
type: Opaque
data:
  webserver-secret-key: {{ default (randAlphaNum 32) .Values.security.webserverSecretKey | b64enc | quote }}
{{- end }}

# Fernet key for Airflow encryption
{{- if not .Values.secrets.existingFernetKey }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "composer2.fullname" . }}-fernet-key
  labels:
    {{- include "composer2.labels" . | nindent 4 }}
  annotations:
    {{- include "composer2.secretAnnotations" . | nindent 4 }}
type: Opaque
data:
  fernet-key: {{ default (randAlphaNum 32) .Values.security.fernetKey | b64enc | quote }}
{{- end }}

# GCP service account credentials
{{- if and (not .Values.secrets.existingGcpCredentials) .Values.security.gcpCredentials }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "composer2.fullname" . }}-gcp-credentials
  labels:
    {{- include "composer2.labels" . | nindent 4 }}
  annotations:
    {{- include "composer2.secretAnnotations" . | nindent 4 }}
type: Opaque
data:
  key.json: {{ .Values.security.gcpCredentials | b64enc | quote }}
{{- end }}

# Custom secrets defined in .Values.secrets.custom
{{- if .Values.secrets.custom }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "composer2.fullname" . }}-custom
  labels:
    {{- include "composer2.labels" . | nindent 4 }}
  annotations:
    {{- include "composer2.secretAnnotations" . | nindent 4 }}
type: Opaque
data:
  {{- range $key, $value := .Values.secrets.custom }}
  {{ $key }}: {{ include "composer2.lookupSecretRef" $value | b64enc | quote }}
  {{- end }}
{{- end }}

# Environment-specific secrets
{{- $environment := include "composer2.environment" . -}}
{{- if hasKey .Values.secrets $environment }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "composer2.fullname" . }}-{{ $environment }}
  labels:
    {{- include "composer2.labels" . | nindent 4 }}
  annotations:
    {{- include "composer2.secretAnnotations" . | nindent 4 }}
    environment: {{ $environment | quote }}
type: Opaque
data:
  {{- range $key, $value := index .Values.secrets $environment }}
  {{ $key }}: {{ include "composer2.lookupSecretRef" $value | b64enc | quote }}
  {{- end }}
{{- end }}

# Secret rotation configuration - creates an annotation with the current timestamp
# to ensure Kubernetes picks up changes during rotation even if content is the same
{{- if .Values.secrets.enableRotation }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "composer2.fullname" . }}-rotation-metadata
  labels:
    {{- include "composer2.labels" . | nindent 4 }}
  annotations:
    rotation-timestamp: {{ now | quote }}
type: Opaque
data:
  last-rotation: {{ now | b64enc | quote }}
{{- end }}